{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ChelseyCochrane/chelseys-repository/blob/main/coding_homework_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Coding Homework #1\n",
        "\n",
        "**Instructions** (Note: it is very important you follow these instructions in order!)\n",
        "\n",
        "1. Run the first *Code Cell* below.\n",
        "\n",
        "2. Make a *Markdown Cell* that contains the following information:\n",
        "  * Your name (small header)\n",
        "  * The name of this class (italicized)\n",
        "  * The date (bolded)\n",
        "\n",
        "3. **Important!**: For each *Code Cell* that you create, make at least one line of code with a `#` in front of it that describes what your code does.\n",
        "\n",
        "4. Make a *Code Cell* that turns `v_rest1.csv` into a `Pandas DataFrame` called `pandas_data1`, and `v_rest2.csv` into a `Pandas DataFrame` called `pandas_data2`. Recall that we covered how to import `.csv` files as `Pandas DataFrames` in our in-class coding activity on January 30th. \n",
        "\n",
        "5. Make a *Code Cell* that converts `pandas_data1` into a `list` variable called `data1`, and converts `pandas_data2` into a `list` variable called `data2`. The following syntax is an example of how to do this:\n",
        "\n",
        "\n",
        "```\n",
        "data1 = pandas_data1.values.tolist()\n",
        "```\n",
        "\n",
        "6. When you convert a `Pandas DataFrame` into a `list`, it brackets each individual element - we don't want that! To get around this issue, make a *Code Cell* that flattens `data1` and `data2` using the `numpy.squeeze()` function. Your first *Code Cell* imported the `NumPy` module as `np`, so we can use the following code to flatten `data1`:\n",
        "\n",
        "\n",
        "```\n",
        "data1 = np.squeeze(data1)\n",
        "```\n",
        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Repeat this for `data2`.\n",
        "\n",
        "7. Make a *Code Cell* that prints the length of `data1`.\n",
        "\n",
        "8. Make a *Code Cell* that prints the 5th, 6th, 7th, and 8th elements of `data2`.\n",
        "\n",
        "9. Make a *Code Cell* that prints the second-to-last and last elements of `data1` (use negative indexing).\n",
        "\n",
        "10. Make a *Code Cell* that prints the `type` of `data2` by using the `type` function.\n",
        "\n",
        "11. The first *Code Cell* you ran imports a module called `matplotlib`. In a new *Code Cell*, use `matplotlib` to make a histogram of `data1`. You can use the syntax `plt.hist()` to do this (remember that the variable you are applying the function to goes inside of the parentheses). \n",
        "\n",
        "12. In a new *Code Cell*, re-make your histogram and use the `plt.xlabel()` and `plt.ylabel()` functions to label your axes.\n",
        "\n",
        "13. In a new *Code Cell*, follow the instructions in steps 11 and 12 to make another histogram with axis labels for `data2`. \n",
        "\n",
        "14. In a new *Markdown Cell*, write a brief description of any differences that you observe between your two histograms. Does one group of cells seem to have a higher/lower resting membrane potential than the other group of cells?\n",
        "\n",
        "15. In a new *Code Cell*, create a new variable called `data3`. Let `data3` be a list containing both `data1` and `data2`. \n",
        "\n",
        "16. Make a *Code Cell* that prints the last element of `data2`. You must index `data3` to do this (hint: we covered this in our in-class coding activity on February 1st).\n",
        "\n",
        "17. Save a copy of this notebook to your GitHub repo with the title \"coding_homework_1.pynb\". "
      ],
      "metadata": {
        "id": "R8xCV2iP1KZ_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import matplotlib, pandas, and numpy\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "48IPWJIt59-Y"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Chelsey Cochrane\n",
        "*Intro to Neural Data Analysis*\n",
        "\n",
        "**02/06/2023**"
      ],
      "metadata": {
        "id": "oBXQo5FWnz7u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# turning v_crest 1 into pandas_data1\n",
        "url1 = 'https://raw.githubusercontent.com/ChelseyCochrane/chelseys-repository/main/vrest_1.csv'\n",
        "pandas_data1 = pd.read_csv(url1)"
      ],
      "metadata": {
        "id": "3ehtatGYpAcD"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# turning v_crest 2 into pandas_data2\n",
        "url2 = 'https://raw.githubusercontent.com/ChelseyCochrane/chelseys-repository/main/vrest_2.csv'\n",
        "pandas_data2 = pd.read_csv(url2)\n"
      ],
      "metadata": {
        "id": "gdRNMnpQyhe1"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#converting pandas_data1 into a list called data1\n",
        "data1 = pandas_data1.values.tolist()\n",
        "pandas_data1.values.tolist()"
      ],
      "metadata": {
        "id": "xZB7IR-QzHbI",
        "outputId": "667f545a-fa8c-43cf-e1de-1ade0fc80f27",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[-77.65863705],\n",
              " [-75.20915451],\n",
              " [-78.21231842],\n",
              " [-77.52663269],\n",
              " [-75.55362216],\n",
              " [-69.02811356],\n",
              " [-73.838935],\n",
              " [-73.77071034],\n",
              " [-65.11337835],\n",
              " [-73.08940964],\n",
              " [-65.72109046],\n",
              " [-74.13655006]]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#converting pandas_data2 into a list called data2\n",
        "data2 = pandas_data2.values.tolist()\n",
        "pandas_data2.values.tolist()"
      ],
      "metadata": {
        "id": "5mVKIhgFzMTr",
        "outputId": "2ae1d033-0c7c-4a32-89c9-f6079a67bcb3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[-63.18380907],\n",
              " [-72.46682231],\n",
              " [-76.15782261],\n",
              " [-71.39769363],\n",
              " [-71.77527046],\n",
              " [-82.22607751],\n",
              " [-78.58990955],\n",
              " [-67.51567459],\n",
              " [-76.35990906],\n",
              " [-62.21961975],\n",
              " [-65.13868915],\n",
              " [-74.17537371]]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#flattening data1\n",
        "data1 = np.squeeze(data1)\n",
        "np.squeeze(data1)"
      ],
      "metadata": {
        "id": "iSqZ-Oa9zfj7",
        "outputId": "cc872339-f975-4102-eed7-d236eab5f1a6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-77.65863705, -75.20915451, -78.21231842, -77.52663269,\n",
              "       -75.55362216, -69.02811356, -73.838935  , -73.77071034,\n",
              "       -65.11337835, -73.08940964, -65.72109046, -74.13655006])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#flattening data2\n",
        "data2 = np.squeeze(data2)\n",
        "np.squeeze(data2)"
      ],
      "metadata": {
        "id": "RU1jkOIXziVO",
        "outputId": "388db015-daf4-4c23-b99e-174434ec7598",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-63.18380907, -72.46682231, -76.15782261, -71.39769363,\n",
              "       -71.77527046, -82.22607751, -78.58990955, -67.51567459,\n",
              "       -76.35990906, -62.21961975, -65.13868915, -74.17537371])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing list of data1\n",
        "print(data1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MDexQ5qd2p-z",
        "outputId": "8be47dea-875c-4a33-db48-b47227369d4b"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-77.65863705 -75.20915451 -78.21231842 -77.52663269 -75.55362216\n",
            " -69.02811356 -73.838935   -73.77071034 -65.11337835 -73.08940964\n",
            " -65.72109046 -74.13655006]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing the 5th, 6th, 7th, and 8th elements of data2.\n",
        "data2[4:8]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FLRYfWS_te_B",
        "outputId": "9f6edeec-fab6-42f1-80b9-5bbf2f1f09d8"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-71.77527046, -82.22607751, -78.58990955, -67.51567459])"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing the second-to-last and last elements of data1 (use negative indexing).\n",
        "data1[-2:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vUuyCDFuvAf_",
        "outputId": "2afec3d2-e701-4f6c-90f8-47e4a005b5c1"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-65.72109046, -74.13655006])"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing the type of data2\n",
        "type(data2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gplR5MemwA6b",
        "outputId": "a408bde1-2c85-41eb-8d10-61f9fd78a7cd"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#making a histogram of data1\n",
        "plt.hist(data1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "SppIdmJdwNpV",
        "outputId": "e8ee9da6-a16f-46ca-8ccb-b4fc34cb83ca"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([3., 0., 2., 4., 0., 0., 0., 1., 0., 2.]),\n",
              " array([-78.21231842, -76.90242441, -75.59253041, -74.2826364 ,\n",
              "        -72.97274239, -71.66284839, -70.35295438, -69.04306037,\n",
              "        -67.73316636, -66.42327236, -65.11337835]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#changing the x and y-axis of histogram for data1\n",
        "plt.hist(data1)\n",
        "plt.xlabel('resting membrane potential')\n",
        "plt.ylabel('count')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "ZOskXYxRwYQ3",
        "outputId": "05da09af-b790-4e0b-e951-d9e386d1a2dd"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'count')"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#making a histogram with labeled x and y-axis for data 2\n",
        "plt.hist(data2)\n",
        "plt.xlabel('resting membrane potential')\n",
        "plt.ylabel('count')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "o2rX1L7Py5lW",
        "outputId": "95873687-ad49-46d2-a0bd-3f9b81461cbc"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'count')"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data 1 seems to have relatively lower resting membrane potentials because the y-axis (counts) goes up to 4.00 while the x-axis of Data 2 only goes up to 2.00. Furthermore, they have these high counts for low resting membrane potentials. For example, data 1 has 4 counts for -74 while data 2 only has 2 counts for around -71."
      ],
      "metadata": {
        "id": "U3dDNCeKzEJ5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#making a list of data1 and data2\n",
        "data3=[data1,data2]\n",
        "data3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lFyBr3Dcznh6",
        "outputId": "33a3877e-810e-45c3-fd48-fdd8ba281524"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[array([-77.65863705, -75.20915451, -78.21231842, -77.52663269,\n",
              "        -75.55362216, -69.02811356, -73.838935  , -73.77071034,\n",
              "        -65.11337835, -73.08940964, -65.72109046, -74.13655006]),\n",
              " array([-63.18380907, -72.46682231, -76.15782261, -71.39769363,\n",
              "        -71.77527046, -82.22607751, -78.58990955, -67.51567459,\n",
              "        -76.35990906, -62.21961975, -65.13868915, -74.17537371])]"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing the last element of data2\n",
        "print(data3[1][-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hAIVjPkP0LMc",
        "outputId": "a4ab8389-c00a-48f3-adc6-142fe313132c"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-74.17537371\n"
          ]
        }
      ]
    }
  ]
}
